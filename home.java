/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package indexer;

import java.io.IOException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.JProgressBar;

/**
 *
 * @author PR0PH3T
 */
public class home extends javax.swing.JFrame {
    
    String directory;
    /**
     * Creates new form home
     */
    public home() {
        initComponents();
        advOpts.setVisible(false);
    }
    
    private String getFile(){
        JFileChooser fc=new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Word, PDF Document","docx","pdf");
        fc.setFileFilter(filter);
        int returnVal=fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            return fc.getSelectedFile().getAbsolutePath();
        }
        else {
            return null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtFileLoc = new javax.swing.JTextField();
        btnSelFile = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        boxResult = new javax.swing.JTextArea();
        btnIndexer = new javax.swing.JButton();
        advOpts = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtFreq = new javax.swing.JTextField();
        txtwordsnot = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtwords = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        getAdvOptions = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Indexer Home");

        txtFileLoc.setEnabled(false);

        btnSelFile.setText("Select File");
        btnSelFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelFileActionPerformed(evt);
            }
        });

        boxResult.setEditable(false);
        boxResult.setColumns(20);
        boxResult.setRows(5);
        jScrollPane1.setViewportView(boxResult);

        jScrollPane2.setViewportView(jScrollPane1);

        btnIndexer.setText("Build Index of File");
        btnIndexer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIndexerActionPerformed(evt);
            }
        });

        jLabel3.setText("Minimum Frequency: ");

        txtwordsnot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtwordsnotActionPerformed(evt);
            }
        });

        jLabel2.setText("Words NOT to be in Index (Seperated By Commas):");

        jLabel1.setText("Words to be in Index (Seperated By Commas):");

        javax.swing.GroupLayout advOptsLayout = new javax.swing.GroupLayout(advOpts);
        advOpts.setLayout(advOptsLayout);
        advOptsLayout.setHorizontalGroup(
            advOptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(advOptsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(advOptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, advOptsLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(txtwords, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(advOptsLayout.createSequentialGroup()
                        .addGroup(advOptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(advOptsLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(txtFreq, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtwordsnot, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        advOptsLayout.setVerticalGroup(
            advOptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, advOptsLayout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(txtwords, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtwordsnot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(advOptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtFreq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );

        getAdvOptions.setText("Advanced Options");
        getAdvOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getAdvOptionsActionPerformed(evt);
            }
        });

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtFileLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnSelFile))
                                    .addComponent(advOpts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(btnIndexer)
                                .addGap(18, 18, 18)
                                .addComponent(getAdvOptions)))
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 43, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFileLoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSelFile))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnIndexer)
                            .addComponent(getAdvOptions))
                        .addGap(37, 37, 37)
                        .addComponent(advOpts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtwordsnotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtwordsnotActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtwordsnotActionPerformed

    private void btnSelFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelFileActionPerformed
        // TODO add your handling code here:
        directory = getFile();
        txtFileLoc.setText(directory);
    }//GEN-LAST:event_btnSelFileActionPerformed

    private void btnIndexerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIndexerActionPerformed
        // TODO add your handling code here:
        String document = directory;
        String words_important =  txtwords.getText().trim();
        String[] words_important_ = null;
        String[] words_ignore_ = null;
        String words_ignore = txtwordsnot.getText().trim();
        Integer limit = null;
        
        if ("".equals(txtFreq.getText())) {
            limit = 2;
        } else {
            try {
                limit = Integer.parseInt(txtFreq.getText());
            }
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(this, "You did not enter a number for the minimum string");
            }
        }
        
        if (!words_important.equals("")){
        //TAKING CARE OF USER INPUTTED STRING OF IMPORTANT WORDS
        try{
        words_important = words_important.replaceAll(" ", "");
        //Removing Last Comma if it exists
        if (words_important.lastIndexOf(",") == words_important.length() -1){
            //words_important.[words_important.length()-1].
            words_important = words_important.substring(0, words_important.length()-1);
        }
        
        words_important = words_important.toLowerCase();
        words_important_ = words_important.split(",");
        System.out.println(Arrays.toString(words_important_));
        }
        catch(Exception e){
            System.out.println(e);
            JOptionPane.showMessageDialog(this, "Invalid Input for Important words");
            }    
        }
        updateBar(50);
        if (!words_ignore.equals("")){
        //TAKING CARE OF USER INPUTTED STRING OF WORDS TO IGNORE
        try{                  
        words_ignore = words_ignore.replaceAll(" ", "");
        
        if (words_ignore.lastIndexOf(",") == words_ignore.length() -1){
            //Removing Last Comma if it exists
            //words_important.[words_important.length()-1].
            words_ignore = words_ignore.substring(0, words_ignore.length()-1);
        }
        
        words_ignore = words_ignore.toLowerCase();
        words_ignore_ = words_ignore.split(",");
        }
        catch(Exception e){
            System.out.println(e);
            JOptionPane.showMessageDialog(this, "Invalid Input for words to be ignored");
            }      
        }
        updateBar(30);
        Map<String, Set> document_freq = null;
        try {
            document_freq = Indexer.getIndex(document, limit, words_important_, words_ignore_);
        } catch (IOException ex) {
            Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
        }
        updateBar(70);
        boxResult.setText("");
        boxResult.append("Word     " + "\t" + " Page Number(s)\n");
        for (Map.Entry<String, Set> entry : document_freq.entrySet()){
            if (Arrays.asList(words_ignore).contains(entry.getKey()) == false){
                boxResult.append(entry.getKey() + "\t" + entry.getValue().toString() + "\n");
            }           
        }
        document_freq.clear();
        updateBar(100);
    }//GEN-LAST:event_btnIndexerActionPerformed

    private void getAdvOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getAdvOptionsActionPerformed
        // TODO add your handling code here:
        if (advOpts.isVisible()==false) {
            advOpts.setVisible(true);
            getAdvOptions.setText("Hide Advanced");
        } else if (advOpts.isVisible()==true) {
            advOpts.setVisible(false);
            getAdvOptions.setText("Advanced Options");
        }
        
    }//GEN-LAST:event_getAdvOptionsActionPerformed
    
    public void updateBar(int newValue) {
    progressBar.setValue(newValue);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel advOpts;
    private javax.swing.JTextArea boxResult;
    private javax.swing.JButton btnIndexer;
    private javax.swing.JButton btnSelFile;
    private javax.swing.JButton getAdvOptions;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextField txtFileLoc;
    private javax.swing.JTextField txtFreq;
    private javax.swing.JTextField txtwords;
    private javax.swing.JTextField txtwordsnot;
    // End of variables declaration//GEN-END:variables
}
